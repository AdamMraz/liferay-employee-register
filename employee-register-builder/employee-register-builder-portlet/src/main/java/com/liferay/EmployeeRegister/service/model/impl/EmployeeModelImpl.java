package com.liferay.EmployeeRegister.service.model.impl;

import com.liferay.EmployeeRegister.service.model.Employee;
import com.liferay.EmployeeRegister.service.model.EmployeeModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Employee service. Represents a row in the &quot;Emp_Employee&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.EmployeeRegister.service.model.EmployeeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeeImpl
 * @see com.liferay.EmployeeRegister.service.model.Employee
 * @see com.liferay.EmployeeRegister.service.model.EmployeeModel
 * @generated
 */
public class EmployeeModelImpl extends BaseModelImpl<Employee>
    implements EmployeeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a employee model instance should use the {@link com.liferay.EmployeeRegister.service.model.Employee} interface instead.
     */
    public static final String TABLE_NAME = "Emp_Employee";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "employee_id", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "patronymic", Types.VARCHAR },
            { "surname", Types.VARCHAR },
            { "gender", Types.VARCHAR },
            { "birth_date", Types.TIMESTAMP },
            { "date_of_employment", Types.TIMESTAMP },
            { "salary", Types.INTEGER },
            { "work_phone", Types.VARCHAR },
            { "mobile_phone", Types.VARCHAR },
            { "archive", Types.BOOLEAN },
            { "position_id", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table Emp_Employee (uuid_ VARCHAR(75) null,employee_id LONG not null primary key,name VARCHAR(75) null,patronymic VARCHAR(75) null,surname VARCHAR(75) null,gender VARCHAR(75) null,birth_date DATE null,date_of_employment DATE null,salary INTEGER,work_phone VARCHAR(75) null,mobile_phone VARCHAR(75) null,archive BOOLEAN,position_id LONG)";
    public static final String TABLE_SQL_DROP = "drop table Emp_Employee";
    public static final String ORDER_BY_JPQL = " ORDER BY employee.employeeId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Emp_Employee.employee_id ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.liferay.EmployeeRegister.service.model.Employee"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.liferay.EmployeeRegister.service.model.Employee"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.liferay.EmployeeRegister.service.model.Employee"),
            true);
    public static long UUID_COLUMN_BITMASK = 1L;
    public static long EMPLOYEEID_COLUMN_BITMASK = 2L;
    public static final String MAPPING_TABLE_EMP_BANKS_EMPLOYEES_NAME = "Emp_Banks_Employees";
    public static final Object[][] MAPPING_TABLE_EMP_BANKS_EMPLOYEES_COLUMNS = {
            { "bank_id", Types.BIGINT },
            { "employee_id", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_EMP_BANKS_EMPLOYEES_SQL_CREATE = "create table Emp_Banks_Employees (bank_id LONG not null,employee_id LONG not null,primary key (bank_id, employee_id))";
    public static final boolean FINDER_CACHE_ENABLED_EMP_BANKS_EMPLOYEES = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.Emp_Banks_Employees"), true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.liferay.EmployeeRegister.service.model.Employee"));
    private static ClassLoader _classLoader = Employee.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Employee.class
        };
    private String _uuid;
    private String _originalUuid;
    private long _employeeId;
    private String _name;
    private String _patronymic;
    private String _surname;
    private String _gender;
    private Date _birthDate;
    private Date _dateOfEmployment;
    private int _salary;
    private String _workPhone;
    private String _mobilePhone;
    private boolean _archive;
    private long _positionId;
    private long _columnBitmask;
    private Employee _escapedModel;

    public EmployeeModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _employeeId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setEmployeeId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _employeeId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Employee.class;
    }

    @Override
    public String getModelClassName() {
        return Employee.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("employeeId", getEmployeeId());
        attributes.put("name", getName());
        attributes.put("patronymic", getPatronymic());
        attributes.put("surname", getSurname());
        attributes.put("gender", getGender());
        attributes.put("birthDate", getBirthDate());
        attributes.put("dateOfEmployment", getDateOfEmployment());
        attributes.put("salary", getSalary());
        attributes.put("workPhone", getWorkPhone());
        attributes.put("mobilePhone", getMobilePhone());
        attributes.put("archive", getArchive());
        attributes.put("positionId", getPositionId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long employeeId = (Long) attributes.get("employeeId");

        if (employeeId != null) {
            setEmployeeId(employeeId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String patronymic = (String) attributes.get("patronymic");

        if (patronymic != null) {
            setPatronymic(patronymic);
        }

        String surname = (String) attributes.get("surname");

        if (surname != null) {
            setSurname(surname);
        }

        String gender = (String) attributes.get("gender");

        if (gender != null) {
            setGender(gender);
        }

        Date birthDate = (Date) attributes.get("birthDate");

        if (birthDate != null) {
            setBirthDate(birthDate);
        }

        Date dateOfEmployment = (Date) attributes.get("dateOfEmployment");

        if (dateOfEmployment != null) {
            setDateOfEmployment(dateOfEmployment);
        }

        Integer salary = (Integer) attributes.get("salary");

        if (salary != null) {
            setSalary(salary);
        }

        String workPhone = (String) attributes.get("workPhone");

        if (workPhone != null) {
            setWorkPhone(workPhone);
        }

        String mobilePhone = (String) attributes.get("mobilePhone");

        if (mobilePhone != null) {
            setMobilePhone(mobilePhone);
        }

        Boolean archive = (Boolean) attributes.get("archive");

        if (archive != null) {
            setArchive(archive);
        }

        Long positionId = (Long) attributes.get("positionId");

        if (positionId != null) {
            setPositionId(positionId);
        }
    }

    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @Override
    public long getEmployeeId() {
        return _employeeId;
    }

    @Override
    public void setEmployeeId(long employeeId) {
        _employeeId = employeeId;
    }

    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @Override
    public String getPatronymic() {
        if (_patronymic == null) {
            return StringPool.BLANK;
        } else {
            return _patronymic;
        }
    }

    @Override
    public void setPatronymic(String patronymic) {
        _patronymic = patronymic;
    }

    @Override
    public String getSurname() {
        if (_surname == null) {
            return StringPool.BLANK;
        } else {
            return _surname;
        }
    }

    @Override
    public void setSurname(String surname) {
        _surname = surname;
    }

    @Override
    public String getGender() {
        if (_gender == null) {
            return StringPool.BLANK;
        } else {
            return _gender;
        }
    }

    @Override
    public void setGender(String gender) {
        _gender = gender;
    }

    @Override
    public Date getBirthDate() {
        return _birthDate;
    }

    @Override
    public void setBirthDate(Date birthDate) {
        _birthDate = birthDate;
    }

    @Override
    public Date getDateOfEmployment() {
        return _dateOfEmployment;
    }

    @Override
    public void setDateOfEmployment(Date dateOfEmployment) {
        _dateOfEmployment = dateOfEmployment;
    }

    @Override
    public int getSalary() {
        return _salary;
    }

    @Override
    public void setSalary(int salary) {
        _salary = salary;
    }

    @Override
    public String getWorkPhone() {
        if (_workPhone == null) {
            return StringPool.BLANK;
        } else {
            return _workPhone;
        }
    }

    @Override
    public void setWorkPhone(String workPhone) {
        _workPhone = workPhone;
    }

    @Override
    public String getMobilePhone() {
        if (_mobilePhone == null) {
            return StringPool.BLANK;
        } else {
            return _mobilePhone;
        }
    }

    @Override
    public void setMobilePhone(String mobilePhone) {
        _mobilePhone = mobilePhone;
    }

    @Override
    public boolean getArchive() {
        return _archive;
    }

    @Override
    public boolean isArchive() {
        return _archive;
    }

    @Override
    public void setArchive(boolean archive) {
        _archive = archive;
    }

    @Override
    public long getPositionId() {
        return _positionId;
    }

    @Override
    public void setPositionId(long positionId) {
        _positionId = positionId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Employee.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Employee toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Employee) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EmployeeImpl employeeImpl = new EmployeeImpl();

        employeeImpl.setUuid(getUuid());
        employeeImpl.setEmployeeId(getEmployeeId());
        employeeImpl.setName(getName());
        employeeImpl.setPatronymic(getPatronymic());
        employeeImpl.setSurname(getSurname());
        employeeImpl.setGender(getGender());
        employeeImpl.setBirthDate(getBirthDate());
        employeeImpl.setDateOfEmployment(getDateOfEmployment());
        employeeImpl.setSalary(getSalary());
        employeeImpl.setWorkPhone(getWorkPhone());
        employeeImpl.setMobilePhone(getMobilePhone());
        employeeImpl.setArchive(getArchive());
        employeeImpl.setPositionId(getPositionId());

        employeeImpl.resetOriginalValues();

        return employeeImpl;
    }

    @Override
    public int compareTo(Employee employee) {
        long primaryKey = employee.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Employee)) {
            return false;
        }

        Employee employee = (Employee) obj;

        long primaryKey = employee.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        EmployeeModelImpl employeeModelImpl = this;

        employeeModelImpl._originalUuid = employeeModelImpl._uuid;

        employeeModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Employee> toCacheModel() {
        EmployeeCacheModel employeeCacheModel = new EmployeeCacheModel();

        employeeCacheModel.uuid = getUuid();

        String uuid = employeeCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            employeeCacheModel.uuid = null;
        }

        employeeCacheModel.employeeId = getEmployeeId();

        employeeCacheModel.name = getName();

        String name = employeeCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            employeeCacheModel.name = null;
        }

        employeeCacheModel.patronymic = getPatronymic();

        String patronymic = employeeCacheModel.patronymic;

        if ((patronymic != null) && (patronymic.length() == 0)) {
            employeeCacheModel.patronymic = null;
        }

        employeeCacheModel.surname = getSurname();

        String surname = employeeCacheModel.surname;

        if ((surname != null) && (surname.length() == 0)) {
            employeeCacheModel.surname = null;
        }

        employeeCacheModel.gender = getGender();

        String gender = employeeCacheModel.gender;

        if ((gender != null) && (gender.length() == 0)) {
            employeeCacheModel.gender = null;
        }

        Date birthDate = getBirthDate();

        if (birthDate != null) {
            employeeCacheModel.birthDate = birthDate.getTime();
        } else {
            employeeCacheModel.birthDate = Long.MIN_VALUE;
        }

        Date dateOfEmployment = getDateOfEmployment();

        if (dateOfEmployment != null) {
            employeeCacheModel.dateOfEmployment = dateOfEmployment.getTime();
        } else {
            employeeCacheModel.dateOfEmployment = Long.MIN_VALUE;
        }

        employeeCacheModel.salary = getSalary();

        employeeCacheModel.workPhone = getWorkPhone();

        String workPhone = employeeCacheModel.workPhone;

        if ((workPhone != null) && (workPhone.length() == 0)) {
            employeeCacheModel.workPhone = null;
        }

        employeeCacheModel.mobilePhone = getMobilePhone();

        String mobilePhone = employeeCacheModel.mobilePhone;

        if ((mobilePhone != null) && (mobilePhone.length() == 0)) {
            employeeCacheModel.mobilePhone = null;
        }

        employeeCacheModel.archive = getArchive();

        employeeCacheModel.positionId = getPositionId();

        return employeeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(27);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", employeeId=");
        sb.append(getEmployeeId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", patronymic=");
        sb.append(getPatronymic());
        sb.append(", surname=");
        sb.append(getSurname());
        sb.append(", gender=");
        sb.append(getGender());
        sb.append(", birthDate=");
        sb.append(getBirthDate());
        sb.append(", dateOfEmployment=");
        sb.append(getDateOfEmployment());
        sb.append(", salary=");
        sb.append(getSalary());
        sb.append(", workPhone=");
        sb.append(getWorkPhone());
        sb.append(", mobilePhone=");
        sb.append(getMobilePhone());
        sb.append(", archive=");
        sb.append(getArchive());
        sb.append(", positionId=");
        sb.append(getPositionId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(43);

        sb.append("<model><model-name>");
        sb.append("com.liferay.EmployeeRegister.service.model.Employee");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>employeeId</column-name><column-value><![CDATA[");
        sb.append(getEmployeeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>patronymic</column-name><column-value><![CDATA[");
        sb.append(getPatronymic());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>surname</column-name><column-value><![CDATA[");
        sb.append(getSurname());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>gender</column-name><column-value><![CDATA[");
        sb.append(getGender());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>birthDate</column-name><column-value><![CDATA[");
        sb.append(getBirthDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dateOfEmployment</column-name><column-value><![CDATA[");
        sb.append(getDateOfEmployment());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>salary</column-name><column-value><![CDATA[");
        sb.append(getSalary());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>workPhone</column-name><column-value><![CDATA[");
        sb.append(getWorkPhone());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mobilePhone</column-name><column-value><![CDATA[");
        sb.append(getMobilePhone());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>archive</column-name><column-value><![CDATA[");
        sb.append(getArchive());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>positionId</column-name><column-value><![CDATA[");
        sb.append(getPositionId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
