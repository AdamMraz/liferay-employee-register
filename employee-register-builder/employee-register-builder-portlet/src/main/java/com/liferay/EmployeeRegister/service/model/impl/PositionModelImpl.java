package com.liferay.EmployeeRegister.service.model.impl;

import com.liferay.EmployeeRegister.service.model.Position;
import com.liferay.EmployeeRegister.service.model.PositionModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Position service. Represents a row in the &quot;Emp_Position&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.EmployeeRegister.service.model.PositionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PositionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PositionImpl
 * @see com.liferay.EmployeeRegister.service.model.Position
 * @see com.liferay.EmployeeRegister.service.model.PositionModel
 * @generated
 */
public class PositionModelImpl extends BaseModelImpl<Position>
    implements PositionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a position model instance should use the {@link com.liferay.EmployeeRegister.service.model.Position} interface instead.
     */
    public static final String TABLE_NAME = "Emp_Position";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "position_id", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "archive", Types.BOOLEAN },
            { "employee_id", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table Emp_Position (uuid_ VARCHAR(75) null,position_id LONG not null primary key,name VARCHAR(75) null,archive BOOLEAN,employee_id LONG)";
    public static final String TABLE_SQL_DROP = "drop table Emp_Position";
    public static final String ORDER_BY_JPQL = " ORDER BY position.positionId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Emp_Position.position_id ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.liferay.EmployeeRegister.service.model.Position"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.liferay.EmployeeRegister.service.model.Position"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.liferay.EmployeeRegister.service.model.Position"),
            true);
    public static long UUID_COLUMN_BITMASK = 1L;
    public static long POSITIONID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.liferay.EmployeeRegister.service.model.Position"));
    private static ClassLoader _classLoader = Position.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Position.class
        };
    private String _uuid;
    private String _originalUuid;
    private long _positionId;
    private String _name;
    private boolean _archive;
    private long _employeeId;
    private long _columnBitmask;
    private Position _escapedModel;

    public PositionModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _positionId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setPositionId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _positionId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Position.class;
    }

    @Override
    public String getModelClassName() {
        return Position.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("positionId", getPositionId());
        attributes.put("name", getName());
        attributes.put("archive", getArchive());
        attributes.put("employeeId", getEmployeeId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long positionId = (Long) attributes.get("positionId");

        if (positionId != null) {
            setPositionId(positionId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        Boolean archive = (Boolean) attributes.get("archive");

        if (archive != null) {
            setArchive(archive);
        }

        Long employeeId = (Long) attributes.get("employeeId");

        if (employeeId != null) {
            setEmployeeId(employeeId);
        }
    }

    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @Override
    public long getPositionId() {
        return _positionId;
    }

    @Override
    public void setPositionId(long positionId) {
        _positionId = positionId;
    }

    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @Override
    public boolean getArchive() {
        return _archive;
    }

    @Override
    public boolean isArchive() {
        return _archive;
    }

    @Override
    public void setArchive(boolean archive) {
        _archive = archive;
    }

    @Override
    public long getEmployeeId() {
        return _employeeId;
    }

    @Override
    public void setEmployeeId(long employeeId) {
        _employeeId = employeeId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Position.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Position toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Position) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PositionImpl positionImpl = new PositionImpl();

        positionImpl.setUuid(getUuid());
        positionImpl.setPositionId(getPositionId());
        positionImpl.setName(getName());
        positionImpl.setArchive(getArchive());
        positionImpl.setEmployeeId(getEmployeeId());

        positionImpl.resetOriginalValues();

        return positionImpl;
    }

    @Override
    public int compareTo(Position position) {
        long primaryKey = position.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Position)) {
            return false;
        }

        Position position = (Position) obj;

        long primaryKey = position.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        PositionModelImpl positionModelImpl = this;

        positionModelImpl._originalUuid = positionModelImpl._uuid;

        positionModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Position> toCacheModel() {
        PositionCacheModel positionCacheModel = new PositionCacheModel();

        positionCacheModel.uuid = getUuid();

        String uuid = positionCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            positionCacheModel.uuid = null;
        }

        positionCacheModel.positionId = getPositionId();

        positionCacheModel.name = getName();

        String name = positionCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            positionCacheModel.name = null;
        }

        positionCacheModel.archive = getArchive();

        positionCacheModel.employeeId = getEmployeeId();

        return positionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", positionId=");
        sb.append(getPositionId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", archive=");
        sb.append(getArchive());
        sb.append(", employeeId=");
        sb.append(getEmployeeId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.liferay.EmployeeRegister.service.model.Position");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>positionId</column-name><column-value><![CDATA[");
        sb.append(getPositionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>archive</column-name><column-value><![CDATA[");
        sb.append(getArchive());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>employeeId</column-name><column-value><![CDATA[");
        sb.append(getEmployeeId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
